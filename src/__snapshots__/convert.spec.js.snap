// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convert accepts plugins specified as a string has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert accepts plugins specified as a string renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert accepts plugins specified as a string renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <center>
    <h1>
      <img
        alt="Markdown Component Loader"
        id="logo"
        src={Object {}}
      />
    </h1>
    <p>
      A Webpack loader that turns Markdown into dynamic, stateless React components!
    </p>
    <p>
      <a
        className="bubble-link github-link"
        href="https://github.com/ticky/markdown-component-loader"
      >
        Check it out on GitHub
      </a>
    </p>
  </center>
  <h3
    id="welcomemdx"
  >
    welcome.mdx
  </h3>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <h3
    id="appjsx"
  >
    app.jsx
  </h3>
  <pre />
  <h3
    id="rendered"
  >
    Rendered:
  </h3>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
  <h2
    id="what-else-can-it-do"
  >
    What else can it do?
  </h2>
  <p>
    Use JSX within Markdown. Plus import objects such as shared snippets, fancy library functions or even whole React components, using YAML front-matter:
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      ---
      <br />
      mclAssignmentBeginIbocfaqlmscucyhpqczlzjwwmxlupsjaejgjjsqihkwdnsbswascyzueIEnd
      <br />
      mclAssignmentBeginIdleigduuygxjhlmyaebnpsbvbpeqqqtxmeoyatldlvdfxncbzfwdhboIEnd
      <br />
      <span
        className="hljs-section"
      >
        mclAssignmentBeginIcmnmrpmecorwlvhsnuenryzhahehpfabnvzottlhdcesviifokjjetIEnd
        <br />
        ---
      </span>
      <br />
      <br />
      You are visitor number mclAssignmentBeginIbhqqxtqjvikkyfvbghrraqqnzdvzfutiycofckdtwwjtbpkwamamerjIEnd!
      <br />
      <br />
      mclAssignmentBeginIeicuwqhnqoedvujvnkgdpflzczuuexeqniqhpgpszthjujvgdopnxmtIEnd
      <br />
    </code>
  </pre>
  <p>
    Destructured imports, with some added single quotes:
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      ---
      <br />
      imports:
      <br />
      <span
        className="hljs-section"
      >
        mclAssignmentBeginIctzvcohkrmkakeqxsgtwoirlldoocjefpwharnenjfmyvnhgvaqteihIEnd
        <br />
        ---
      </span>
      <br />
      <br />
      Hello, your user agent is mclAssignmentBeginIbwhzutrgtughmkwawtitsruofspchuarjucxyfkyacbdzttucxsoxsuIEnd.
      <br />
    </code>
  </pre>
  <h2
    id="give-it-a-go"
  >
    Give it a go!
  </h2>
  <p>
    Want to see exactly what Markdown Component Loader will generate when it translates the mdx into a stateless React component?
  </p>
  <div
    className="repl-image"
  >
    <div>
      <a
        className="bubble-link white-bubble"
        href="repl.html"
      >
        Launch editor
      </a>
    </div>
  </div>
  <h2
    id="get-started"
  >
    Get started
  </h2>
  <p>
    Check out the 
    <a
      href="https://github.com/ticky/markdown-component-loader"
    >
      GitHub Readme
    </a>
     for how to get started, including details on how to add styles and event handlers to the DOM nodes generated by the markdown, and other options for customizing the loader.
  </p>
  <center>
    <a
      className="bubble-link github-link"
      href="https://github.com/ticky/markdown-component-loader"
    >
      Check it out on GitHub
    </a>
    <hr />
    <p>
      Made with ðŸ’œ by 
      <a
        href="https://twitter.com/ticky"
      >
        @ticky
      </a>
    </p>
  </center>
</div>
`;

exports[`convert doesn't trigger any kind of comment highlighting in highlights has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert doesn't trigger any kind of comment highlighting in highlights renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert doesn't trigger any kind of comment highlighting in highlights renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <pre>
    <code
      className="language-markdown"
    >
      object
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert gracefully handles loose greater-than and less-than symbols has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert gracefully handles loose greater-than and less-than symbols renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert gracefully handles loose greater-than and less-than symbols renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <blockquote>
    <p>
      foo bar!
    </p>
    <p>
      baz!
    </p>
  </blockquote>
  <p>
    pizza &lt; waffles
  </p>
  <p>
    food&gt;sleep
  </p>
  <p>
    &lt;asdfrafghsgu
  </p>
</div>
`;

exports[`convert handles interpolations within sentences which should be quoted has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert handles interpolations within sentences which should be quoted renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert handles interpolations within sentences which should be quoted renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <p>
    foo 
    Infinity
     { bar 
    Infinity
     } {}
  </p>
</div>
`;

exports[`convert happily renders its own homepage has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert happily renders its own homepage renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert happily renders its own homepage renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <center>
    <h1>
      <img
        alt="Markdown Component Loader"
        id="logo"
        src={Object {}}
      />
    </h1>
    <p>
      A Webpack loader that turns Markdown into dynamic, stateless React components!
    </p>
    <p>
      <a
        className="bubble-link github-link"
        href="https://github.com/ticky/markdown-component-loader"
      >
        Check it out on GitHub
      </a>
    </p>
  </center>
  <h3
    id="welcomemdx"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#welcomemdx"
    >
      ðŸ”—
    </a>
     welcome.mdx
  </h3>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <h3
    id="appjsx"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#appjsx"
    >
      ðŸ”—
    </a>
     app.jsx
  </h3>
  <pre />
  <h3
    id="rendered"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#rendered"
    >
      ðŸ”—
    </a>
     Rendered:
  </h3>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
  <h2
    id="what-else-can-it-do"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#what-else-can-it-do"
    >
      ðŸ”—
    </a>
     What else can it do?
  </h2>
  <p>
    Use JSX within Markdown. Plus import objects such as shared snippets, fancy library functions or even whole React components, using YAML front-matter:
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      ---
      <br />
      mclAssignmentBeginIbocfaqlmscucyhpqczlzjwwmxlupsjaejgjjsqihkwdnsbswascyzueIEnd
      <br />
      mclAssignmentBeginIdleigduuygxjhlmyaebnpsbvbpeqqqtxmeoyatldlvdfxncbzfwdhboIEnd
      <br />
      <span
        className="hljs-section"
      >
        mclAssignmentBeginIcmnmrpmecorwlvhsnuenryzhahehpfabnvzottlhdcesviifokjjetIEnd
        <br />
        ---
      </span>
      <br />
      <br />
      You are visitor number mclAssignmentBeginIbhqqxtqjvikkyfvbghrraqqnzdvzfutiycofckdtwwjtbpkwamamerjIEnd!
      <br />
      <br />
      mclAssignmentBeginIeicuwqhnqoedvujvnkgdpflzczuuexeqniqhpgpszthjujvgdopnxmtIEnd
      <br />
    </code>
  </pre>
  <p>
    Destructured imports, with some added single quotes:
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      ---
      <br />
      imports:
      <br />
      <span
        className="hljs-section"
      >
        mclAssignmentBeginIctzvcohkrmkakeqxsgtwoirlldoocjefpwharnenjfmyvnhgvaqteihIEnd
        <br />
        ---
      </span>
      <br />
      <br />
      Hello, your user agent is mclAssignmentBeginIbwhzutrgtughmkwawtitsruofspchuarjucxyfkyacbdzttucxsoxsuIEnd.
      <br />
    </code>
  </pre>
  <h2
    id="give-it-a-go"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#give-it-a-go"
    >
      ðŸ”—
    </a>
     Give it a go!
  </h2>
  <p>
    Want to see exactly what Markdown Component Loader will generate when it translates the mdx into a stateless React component?
  </p>
  <div
    className="repl-image"
  >
    <div>
      <a
        className="bubble-link white-bubble"
        href="repl.html"
      >
        Launch editor
      </a>
    </div>
  </div>
  <h2
    id="get-started"
  >
    <a
      aria-hidden="true"
      className="header-anchor"
      href="#get-started"
    >
      ðŸ”—
    </a>
     Get started
  </h2>
  <p>
    Check out the 
    <a
      href="https://github.com/ticky/markdown-component-loader"
    >
      GitHub Readme
    </a>
     for how to get started, including details on how to add styles and event handlers to the DOM nodes generated by the markdown, and other options for customizing the loader.
  </p>
  <center>
    <a
      className="bubble-link github-link"
      href="https://github.com/ticky/markdown-component-loader"
    >
      Check it out on GitHub
    </a>
    <hr />
    <p>
      Made with ðŸ’œ by 
      <a
        href="https://twitter.com/ticky"
      >
        @ticky
      </a>
    </p>
  </center>
</div>
`;

exports[`convert isn't confused by unmatched closing tags has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert isn't confused by unmatched closing tags has the expected rendered body 1`] = `
"<div className={className} style={style}>
      <p>asdf</p>
      </div>
      <p>ghjkl</p>
    </div>"
`;

exports[`convert isn't confused by unmatched closing tags throws an error when passed to Babel 1`] = `"unknown: Adjacent JSX elements must be wrapped in an enclosing tag (22:6)"`;

exports[`convert throws if a reserved static is specified 1`] = `"You can't supply a \`propTypes\` static! That name is reserved."`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false,"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":false}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true,"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 1 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 2 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes,foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 3 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 4 has the expected preamble 1`] = `
"
import React from 'react';
import PropTypes from 'prop-types';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={React : React,PropTypes : PropTypes}

"
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {
    "PropTypes": Object {
      "PropTypes": [Circular],
      "any": [Function],
      "array": [Function],
      "arrayOf": [Function],
      "bool": [Function],
      "checkPropTypes": [Function],
      "element": [Function],
      "exact": [Function],
      "func": [Function],
      "instanceOf": [Function],
      "node": [Function],
      "number": [Function],
      "object": [Function],
      "objectOf": [Function],
      "oneOf": [Function],
      "oneOfType": [Function],
      "shape": [Function],
      "string": [Function],
      "symbol": [Function],
    },
    "React": Object {
      "Children": Object {
        "count": [Function],
        "forEach": [Function],
        "map": [Function],
        "only": [Function],
        "toArray": [Function],
      },
      "Component": [Function],
      "Fragment": Symbol(react.fragment),
      "PureComponent": [Function],
      "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
        "ReactComponentTreeHook": Object {},
        "ReactCurrentOwner": Object {
          "current": null,
        },
        "ReactDebugCurrentFrame": Object {
          "getCurrentStack": null,
          "getStackAddendum": [Function],
        },
        "assign": [Function],
      },
      "cloneElement": [Function],
      "createElement": [Function],
      "createFactory": [Function],
      "isValidElement": [Function],
      "unstable_AsyncComponent": [Function],
      "version": "16.2.0",
    },
  },
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"implicitlyImportReact":true}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":false}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":"somenonsensevalue"}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    <div
      className="my-container-class"
    >
      <ul>
        <li>
          <a
            href="#test-document"
          >
            Test Document
          </a>
          <ul>
            <li>
              <a
                href="#basic-markdown-template"
              >
                Basic Markdown Template
              </a>
            </li>
            <li>
              <a
                href="#heres-a-couple-of-hyperlinks"
              >
                Here's a couple of hyperlinks
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-no-interpolations"
              >
                Here's a code snippet with no interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
              >
                Here's a code snippet with things which shouldn't be treated as interpolations
              </a>
            </li>
            <li>
              <a
                href="#heres-a-paragraph-with-a-simple-interpolation"
              >
                Here's a paragraph with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-a-simple-interpolation"
              >
                Here's a code snippet with a simple interpolation
              </a>
            </li>
            <li>
              <a
                href="#heres-a-code-snippet-with-arrows-in-it"
              >
                Here's a code snippet with arrows in it
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-code-snippet"
              >
                Here's an unhinted code snippet
              </a>
            </li>
            <li>
              <a
                href="#heres-an-unhinted-snippet-with-no-discernible-language"
              >
                Here's an unhinted snippet with no discernible language
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null,[null,{"containerClass":"my-container-class"}]]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="test-document"
  >
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2
    id="basic-markdown-template"
  >
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2
    id="heres-a-couple-of-hyperlinks"
  >
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2
    id="heres-a-code-snippet-with-no-interpolations"
  >
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-things-which-shouldnt-be-treated-as-interpolations"
  >
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-paragraph-with-a-simple-interpolation"
  >
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2
    id="heres-a-code-snippet-with-a-simple-interpolation"
  >
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-a-code-snippet-with-arrows-in-it"
  >
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-code-snippet"
  >
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2
    id="heres-an-unhinted-snippet-with-no-discernible-language"
  >
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id="markdown-template-with-imports-static-attributes-and-interpolations"
  >
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1
    id=""
  >
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true,"markdownItPlugins":[null]}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    1
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 3 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object,
  elementProps: PropTypes.object
};

MarkdownComponent.defaultProps = {
  elementProps: {}
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 4 renders as expected within React 1`] = `
Object {
  "defaultProps": Object {
    "elementProps": Object {},
  },
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "elementProps": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{"passElementProps":true}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;

exports[`convert with a config object of \`{}\` for component example 1 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{}\` for component example 1 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{}\` for component example 1 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Test Document
  </h1>
  <p>
    [[toc]]
  </p>
  <h2>
    Basic Markdown Template
  </h2>
  <p>
    This is a basic Markdown template, with no interpolations going on.
  </p>
  <p>
    This should be
  </p>
  <ul>
    <li>
      easy and;
    </li>
    <li>
      predictable!
    </li>
  </ul>
  <h2>
    Here's a couple of hyperlinks
  </h2>
  <p>
    <a
      href="https://duckduckgo.com"
    >
      https://duckduckgo.com
    </a>
     
    <a
      href="https://github.com"
    >
      GitHub
    </a>
  </p>
  <h2>
    Here's a code snippet with no interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      npm install -g yarn
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with things which shouldn't be treated as interpolations
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=blah
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a paragraph with a simple interpolation
  </h2>
  <p>
    There are 
    0
     props being supplied to this component.
  </p>
  <h2>
    Here's a code snippet with a simple interpolation
  </h2>
  <pre>
    <code
      className="language-bash"
    >
      <span
        className="hljs-keyword"
      >
        function
      </span>
       
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          rbenv
        </span>
      </span>
      () {
      <br />
        RUBY=
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's a code snippet with arrows in it
  </h2>
  <pre>
    <code
      className="language-javascript"
    >
      <span
        className="hljs-keyword"
      >
        const
      </span>
       MyComponent = 
      <span
        className="hljs-function"
      >
        <span
          className="hljs-params"
        >
          ()
        </span>
         =&gt;
      </span>
       {
      <br />
        
      <span
        className="hljs-keyword"
      >
        return
      </span>
       
      <span
        className="hljs-built_in"
      >
        window
      </span>
      .navigator.userAgent;
      <br />
      }
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted code snippet
  </h2>
  <pre>
    <code>
      <span
        className="hljs-keyword"
      >
        the
      </span>
       quick brown fox jumps over 
      <span
        className="hljs-keyword"
      >
        the
      </span>
       lazy dog
      <br />
    </code>
  </pre>
  <h2>
    Here's an unhinted snippet with no discernible language
  </h2>
  <pre>
    <code>
      )
      <span
        className="hljs-comment"
      >
        ()
      </span>
      <span
        className="hljs-comment"
      >
        (()
      </span>
      )
      <br />
    </code>
  </pre>
  <pre>
    <code
      className="language-bash"
    >
      brew tap buildkite/buildkite
      <br />
      brew install --token=
      <span
        className="hljs-string"
      >
        '
        INSERT-YOUR-AGENT-TOKEN-HERE
        '
      </span>
       buildkite-agent
      <br />
      <br />
      <span
        className="hljs-function"
      >
        <span
          className="hljs-title"
        >
          function
        </span>
      </span>
      () {
      <br />
        ENV=
      <span
        className="hljs-string"
      >
        "foo_bar"
      </span>
      <br />
      }
      <br />
    </code>
  </pre>
  <p>
    Let's also test interpolation inside other elements. 
    <code>
      foo bar
    </code>
  </p>
</div>
`;

exports[`convert with a config object of \`{}\` for component example 2 has the expected preamble 1`] = `
"
import foo from 'foo';
import Bar from 'foo';
import { bugs, name, version } from '../package.json';

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'a custom title';

MarkdownComponent['myArray'] = [
  'foo',
  'bar'
];

MarkdownComponent['anObject'] = {
  'foo': 'bar'
};

MarkdownComponent['NoReallyDontDoThis'] = function anonymous(props
) {
 return React.createElement('span', Object.assign({}, props), 'Please don\\\\'t do this.'); 
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={foo : foo,Bar : Bar, bugs :  bugs, name :  name, version  :  version }

"
`;

exports[`convert with a config object of \`{}\` for component example 2 renders as expected within React 1`] = `
Object {
  "NoReallyDontDoThis": [Function],
  "anObject": Object {
    "foo": "bar",
  },
  "exampleCodes": Array [],
  "exampleScope": Object {
    "Bar": "bar",
    "bugs": Object {
      "url": "https://github.com/nanyuantingfeng/markdown-rc-loader/issues",
    },
    "foo": "bar",
    "name": "markdown-rc-loader",
    "version": "1.1.0-beta.0",
  },
  "myArray": Array [
    "foo",
    "bar",
  ],
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "a custom title",
}
`;

exports[`convert with a config object of \`{}\` for component example 2 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    Markdown template with imports, static attributes and interpolations
  </h1>
  <p>
    This file includes some custom static attributes which should be reflected fine on the resultant object
  </p>
  <p>
    This is a 
    <em>
      Markdown Component
    </em>
     file. Here you can include JSX-style assignment expressions; this component was generated using version 
    1.1.0-beta.0
     of 
    markdown-rc-loader
    !
  </p>
  <p>
    We're importing foo, which is 
    bar
    .
  </p>
  <p>
    We're also adding a react component here: 
    <bar
      style={
        Object {
          "foo": "bar",
        }
      }
      url="https://github.com/nanyuantingfeng/markdown-rc-loader/issues"
    />
  </p>
  <p>
    <span
      style={
        Object {
          "fontWeight": "bold",
        }
      }
    >
      Please don't do this.
    </span>
  </p>
  <span
    style={
      Object {
        "fontStyle": "italic",
      }
    }
  >
    Please don't do this.
  </span>
  <p>
    Another cool thing you can do is use JSX 
    <strong>
      directly
    </strong>
     - hereâ€™s an SVG element, used inline: 
    <svg
      style={
        Object {
          "display": "inline",
          "height": "1em",
        }
      }
      viewBox="0 0 304 290"
    >
      <path
        d="M2,111 h300 l-242.7,176.3 92.7,-285.3 92.7,285.3 z"
        fill="none"
        stroke="currentColor"
        strokeWidth="16"
      />
    </svg>
    .
  </p>
</div>
`;

exports[`convert with a config object of \`{}\` for component example 3 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['title'] = 'Markdown Component Loader';

MarkdownComponent['exampleCodes'] = [
  '{ <span className=\\"emphasis\\">import Welcome from \\\\'./welcome.mdx\\\\';</span> }\\\\n \\\\nReactDOM.render(\\\\n\\\\n{\`  document.getElementById(\\\\'app\\\\')\`}\\\\n);\\\\n'
];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{}\` for component example 3 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [
    "{ <span className=\\"emphasis\\">import Welcome from './welcome.mdx';</span> }
 
ReactDOM.render(

{\`  document.getElementById('app')\`}
);
",
  ],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
  "title": "Markdown Component Loader",
}
`;

exports[`convert with a config object of \`{}\` for component example 3 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
>
  <h1>
    <img
      alt="Markdown Component Loader"
      src="logo.svg"
    />
  </h1>
  <p>
    A Webpack loader that turns Markdown into dynamic, stateless React components!
  </p>
  <p>
    <a
      className="github-link"
    >
      Check it out on GitHub
    </a>
  </p>
  <p>
    <strong>
      welcome.mdx
    </strong>
  </p>
  <pre>
    <code
      className="language-markdown"
    >
      mclAssignmentBeginIbpxpzlxaxrilgeqtrchgnixsrbvqyskbapvlrgbcuxyqerphxtulxufIEnd
      <br />
    </code>
  </pre>
  <p>
    <strong>
      app.jsx
    </strong>
  </p>
  <pre />
  <p>
    <strong>
      Rendered:
    </strong>
  </p>
  <pre>
    <code
      className="language-html"
    >
      <span
        className="hljs-tag"
      >
        &lt;
        <span
          className="hljs-name"
        >
          div
        </span>
         
        <span
          className="hljs-attr"
        >
          id
        </span>
        =
        <span
          className="hljs-string"
        >
          "app"
        </span>
        &gt;
      </span>
      <br />
      mclAssignmentBeginIbiixfpetqlmvahdhknofmagvmntjojqaqfahlvadhxfpaocdyqzlvumIEnd
      <br />
      <span
        className="hljs-tag"
      >
        &lt;/
        <span
          className="hljs-name"
        >
          div
        </span>
        &gt;
      </span>
      <br />
    </code>
  </pre>
</div>
`;

exports[`convert with a config object of \`{}\` for component example 4 has the expected preamble 1`] = `
"

MarkdownComponent.propTypes = {
  className: PropTypes.string,
  style: PropTypes.object
};

MarkdownComponent['exampleCodes'] = [];


MarkdownComponent.exampleScope={}

"
`;

exports[`convert with a config object of \`{}\` for component example 4 renders as expected within React 1`] = `
Object {
  "exampleCodes": Array [],
  "exampleScope": Object {},
  "propTypes": Object {
    "className": [Function],
    "style": [Function],
  },
}
`;

exports[`convert with a config object of \`{}\` for component example 4 renders as expected within React 2`] = `
<div
  className={undefined}
  style={undefined}
/>
`;
